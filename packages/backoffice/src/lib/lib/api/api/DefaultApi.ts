/**
 * AIM Platform API
 * 
 *
 * OpenAPI spec version: 2017-01-21T01:00:00-05:00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class DefaultApi {
  protected basePath = 'https://ucujwanpi8.execute-api.us-east-1.amazonaws.com/dev';
  public defaultHeaders : Headers = new Headers();

  constructor(protected http: Http, @Optional() basePath: string) {
    if (basePath) {
      this.basePath = basePath;
    }
  }

  /**
   * 
   * 
   * @param appId 
   */
  public appsAppIdAuthConfigGet (appId: string, extraHttpRequestParams?: any ) : Observable<models.AuthConfig> {
    const path = this.basePath + '/apps/{appId}/auth/config'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdAuthConfigGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   * @param offset 
   * @param limit 
   */
  public appsAppIdDataTypesGet (appId: string, offset?: string, limit?: string, extraHttpRequestParams?: any ) : Observable<models.DataTypes> {
    const path = this.basePath + '/apps/{appId}/dataTypes'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdDataTypesGet.');
    }
    if (offset !== undefined) {
      queryParameters.set('offset', offset);
    }

    if (limit !== undefined) {
      queryParameters.set('limit', limit);
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   * @param id 
   */
  public appsAppIdDataTypesIdGet (appId: string, id: string, extraHttpRequestParams?: any ) : Observable<models.DataTypeItem> {
    const path = this.basePath + '/apps/{appId}/dataTypes/{id}'
      .replace('{' + 'appId' + '}', String(appId))
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdDataTypesIdGet.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling appsAppIdDataTypesIdGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   */
  public appsAppIdDelete (appId: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps/{appId}'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   */
  public appsAppIdGet (appId: string, extraHttpRequestParams?: any ) : Observable<models.AppsItem> {
    const path = this.basePath + '/apps/{appId}'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   */
  public appsAppIdModulesDelete (appId: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps/{appId}/modules'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdModulesDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   */
  public appsAppIdModulesGet (appId: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/apps/{appId}/modules'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdModulesGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   * @param id 
   */
  public appsAppIdModulesIdDelete (appId: string, id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps/{appId}/modules/{id}'
      .replace('{' + 'appId' + '}', String(appId))
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdModulesIdDelete.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling appsAppIdModulesIdDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   * @param id 
   */
  public appsAppIdModulesIdGet (appId: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/apps/{appId}/modules/{id}'
      .replace('{' + 'appId' + '}', String(appId))
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdModulesIdGet.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling appsAppIdModulesIdGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   * @param id 
   */
  public appsAppIdModulesIdPost (appId: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/apps/{appId}/modules/{id}'
      .replace('{' + 'appId' + '}', String(appId))
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdModulesIdPost.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling appsAppIdModulesIdPost.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   * @param id 
   */
  public appsAppIdModulesIdPut (appId: string, id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps/{appId}/modules/{id}'
      .replace('{' + 'appId' + '}', String(appId))
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdModulesIdPut.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling appsAppIdModulesIdPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   */
  public appsAppIdModulesPost (appId: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/apps/{appId}/modules'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdModulesPost.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   */
  public appsAppIdModulesPut (appId: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps/{appId}/modules'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdModulesPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param appId 
   * @param saveAppsItem 
   */
  public appsAppIdPut (appId: string, saveAppsItem: models.SaveAppsItem, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps/{appId}'
      .replace('{' + 'appId' + '}', String(appId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'appId' is not null or undefined
    if (appId === null || appId === undefined) {
      throw new Error('Required parameter appId was null or undefined when calling appsAppIdPut.');
    }
    // verify required parameter 'saveAppsItem' is not null or undefined
    if (saveAppsItem === null || saveAppsItem === undefined) {
      throw new Error('Required parameter saveAppsItem was null or undefined when calling appsAppIdPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveAppsItem);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param deleteApps 
   */
  public appsDelete (deleteApps: models.DeleteApps, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'deleteApps' is not null or undefined
    if (deleteApps === null || deleteApps === undefined) {
      throw new Error('Required parameter deleteApps was null or undefined when calling appsDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(deleteApps);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param domain 
   */
  public appsFindByDomainDomainGet (domain: string, extraHttpRequestParams?: any ) : Observable<models.AppsItemId> {
    const path = this.basePath + '/apps/findByDomain/{domain}'
      .replace('{' + 'domain' + '}', String(domain));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'domain' is not null or undefined
    if (domain === null || domain === undefined) {
      throw new Error('Required parameter domain was null or undefined when calling appsFindByDomainDomainGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param offset 
   * @param platformId 
   * @param limit 
   */
  public appsGet (offset?: string, platformId?: string, limit?: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    if (offset !== undefined) {
      queryParameters.set('offset', offset);
    }

    if (platformId !== undefined) {
      queryParameters.set('platformId', platformId);
    }

    if (limit !== undefined) {
      queryParameters.set('limit', limit);
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param saveApps 
   */
  public appsPost (saveApps: models.SaveApps, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'saveApps' is not null or undefined
    if (saveApps === null || saveApps === undefined) {
      throw new Error('Required parameter saveApps was null or undefined when calling appsPost.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveApps);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param saveApps 
   */
  public appsPut (saveApps: models.SaveApps, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/apps';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'saveApps' is not null or undefined
    if (saveApps === null || saveApps === undefined) {
      throw new Error('Required parameter saveApps was null or undefined when calling appsPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveApps);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public authConfigGet (extraHttpRequestParams?: any ) : Observable<models.AuthConfig> {
    const path = this.basePath + '/auth/config';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param dataId 
   */
  public dataDataIdDelete (dataId: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/data/{dataId}'
      .replace('{' + 'dataId' + '}', String(dataId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'dataId' is not null or undefined
    if (dataId === null || dataId === undefined) {
      throw new Error('Required parameter dataId was null or undefined when calling dataDataIdDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param dataId 
   */
  public dataDataIdGet (dataId: string, extraHttpRequestParams?: any ) : Observable<models.DataItem> {
    const path = this.basePath + '/data/{dataId}'
      .replace('{' + 'dataId' + '}', String(dataId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'dataId' is not null or undefined
    if (dataId === null || dataId === undefined) {
      throw new Error('Required parameter dataId was null or undefined when calling dataDataIdGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param dataId 
   * @param saveDataItem 
   */
  public dataDataIdPut (dataId: string, saveDataItem: models.SaveDataItem, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/data/{dataId}'
      .replace('{' + 'dataId' + '}', String(dataId));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'dataId' is not null or undefined
    if (dataId === null || dataId === undefined) {
      throw new Error('Required parameter dataId was null or undefined when calling dataDataIdPut.');
    }
    // verify required parameter 'saveDataItem' is not null or undefined
    if (saveDataItem === null || saveDataItem === undefined) {
      throw new Error('Required parameter saveDataItem was null or undefined when calling dataDataIdPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveDataItem);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param deleteData 
   */
  public dataDelete (deleteData: models.DeleteData, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/data';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'deleteData' is not null or undefined
    if (deleteData === null || deleteData === undefined) {
      throw new Error('Required parameter deleteData was null or undefined when calling dataDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(deleteData);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param platformId 
   * @param limit 
   * @param offset 
   * @param id 
   */
  public dataGet (platformId: string, limit?: string, offset?: string, id?: string, extraHttpRequestParams?: any ) : Observable<models.Data> {
    const path = this.basePath + '/data';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'platformId' is not null or undefined
    if (platformId === null || platformId === undefined) {
      throw new Error('Required parameter platformId was null or undefined when calling dataGet.');
    }
    if (limit !== undefined) {
      queryParameters.set('limit', limit);
    }

    if (offset !== undefined) {
      queryParameters.set('offset', offset);
    }

    if (platformId !== undefined) {
      queryParameters.set('platformId', platformId);
    }

    if (id !== undefined) {
      queryParameters.set('id', id);
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param saveData 
   */
  public dataPost (saveData: models.SaveData, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/data';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'saveData' is not null or undefined
    if (saveData === null || saveData === undefined) {
      throw new Error('Required parameter saveData was null or undefined when calling dataPost.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveData);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param saveData 
   */
  public dataPut (saveData: models.SaveData, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/data';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'saveData' is not null or undefined
    if (saveData === null || saveData === undefined) {
      throw new Error('Required parameter saveData was null or undefined when calling dataPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveData);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param deleteDataTypes 
   */
  public dataTypesDelete (deleteDataTypes: models.DeleteDataTypes, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/dataTypes';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'deleteDataTypes' is not null or undefined
    if (deleteDataTypes === null || deleteDataTypes === undefined) {
      throw new Error('Required parameter deleteDataTypes was null or undefined when calling dataTypesDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(deleteDataTypes);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param platformId 
   * @param limit 
   * @param offset 
   * @param preload 
   */
  public dataTypesGet (platformId: string, limit?: string, offset?: string, preload?: string, extraHttpRequestParams?: any ) : Observable<models.DataTypes> {
    const path = this.basePath + '/dataTypes';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'platformId' is not null or undefined
    if (platformId === null || platformId === undefined) {
      throw new Error('Required parameter platformId was null or undefined when calling dataTypesGet.');
    }
    if (limit !== undefined) {
      queryParameters.set('limit', limit);
    }

    if (offset !== undefined) {
      queryParameters.set('offset', offset);
    }

    if (platformId !== undefined) {
      queryParameters.set('platformId', platformId);
    }

    if (preload !== undefined) {
      queryParameters.set('preload', preload);
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public dataTypesIdDelete (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/dataTypes/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling dataTypesIdDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   * @param preload 
   */
  public dataTypesIdGet (id: string, preload?: string, extraHttpRequestParams?: any ) : Observable<models.DataTypeItem> {
    const path = this.basePath + '/dataTypes/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling dataTypesIdGet.');
    }
    if (preload !== undefined) {
      queryParameters.set('preload', preload);
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   * @param saveDataTypes 
   */
  public dataTypesIdPut (id: string, saveDataTypes: models.SaveDataTypes, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/dataTypes/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling dataTypesIdPut.');
    }
    // verify required parameter 'saveDataTypes' is not null or undefined
    if (saveDataTypes === null || saveDataTypes === undefined) {
      throw new Error('Required parameter saveDataTypes was null or undefined when calling dataTypesIdPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveDataTypes);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param saveDataTypes 
   */
  public dataTypesPost (saveDataTypes: models.SaveDataTypes, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/dataTypes';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'saveDataTypes' is not null or undefined
    if (saveDataTypes === null || saveDataTypes === undefined) {
      throw new Error('Required parameter saveDataTypes was null or undefined when calling dataTypesPost.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveDataTypes);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param saveDataTypes 
   */
  public dataTypesPut (saveDataTypes: models.SaveDataTypes, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/dataTypes';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'saveDataTypes' is not null or undefined
    if (saveDataTypes === null || saveDataTypes === undefined) {
      throw new Error('Required parameter saveDataTypes was null or undefined when calling dataTypesPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };
    requestOptions.body = JSON.stringify(saveDataTypes);

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public modulesDelete (extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/modules';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public modulesGet (extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/modules';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public modulesIdDelete (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/modules/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling modulesIdDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public modulesIdGet (id: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/modules/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling modulesIdGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public modulesIdPost (id: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/modules/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling modulesIdPost.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public modulesIdPut (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/modules/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling modulesIdPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public modulesPost (extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/modules';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public modulesPut (extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/modules';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public platformsDelete (extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/platforms';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public platformsGet (extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/platforms';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public platformsIdDelete (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/platforms/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling platformsIdDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public platformsIdGet (id: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/platforms/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling platformsIdGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public platformsIdPut (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/platforms/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling platformsIdPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public platformsPost (extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/platforms';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public platformsPut (extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/platforms';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public usersDelete (extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/users';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param email 
   */
  public usersFindByEmailGet (email: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/users/findByEmail';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'email' is not null or undefined
    if (email === null || email === undefined) {
      throw new Error('Required parameter email was null or undefined when calling usersFindByEmailGet.');
    }
    if (email !== undefined) {
      queryParameters.set('email', email);
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param offset 
   * @param limit 
   */
  public usersGet (offset?: string, limit?: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/users';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    if (offset !== undefined) {
      queryParameters.set('offset', offset);
    }

    if (limit !== undefined) {
      queryParameters.set('limit', limit);
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public usersIdDelete (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/users/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling usersIdDelete.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'DELETE',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public usersIdGet (id: string, extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/users/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling usersIdGet.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   * @param id 
   */
  public usersIdPut (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/users/{id}'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling usersIdPut.');
    }
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public usersPost (extraHttpRequestParams?: any ) : Observable<models.Empty> {
    const path = this.basePath + '/users';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'POST',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * 
   * 
   */
  public usersPut (extraHttpRequestParams?: any ) : Observable<{}> {
    const path = this.basePath + '/users';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    let requestOptions: RequestOptionsArgs = {
      method: 'PUT',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

}
